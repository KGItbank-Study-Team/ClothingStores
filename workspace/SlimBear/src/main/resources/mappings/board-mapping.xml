<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.slimbear.mapper.Board">


	<!-- 관리자 리뷰 -->
	<select id="SELECT_COMMENT_BY_REVIEW_UID" resultType="comment">
		SELECT *
		FROM reviewComent WHERE review_uid=#{reviewUID}
	</select>
	<select id="SELECT_REVIEW_BY_REVIEW_UID" resultType="review">
		SELECT *
		FROM productReview
		WHERE uid=#{reviewUID}
	</select>
	<insert id="INSERT_COMMENT">
		INSERT INTO reviewComent
		(review_uid, title, content,
		mem_id)
		VALUES(#{review_uid}, #{title}, #{content}, #{mem_id})
	</insert>
	<insert id="ADD_OR_UPDATE_COMMENT">
		INSERT INTO reviewComent (review_uid, title, content, mem_id)
		VALUES (#{review_uid}, #{title}, #{content}, #{mem_id})
		ON DUPLICATE KEY UPDATE title = VALUES(title), content = VALUES(content)
	</insert>
	<select id="SELECT_REVIEW_LIST_ADMIN" resultType="com.kgitbank.slimbear.vo.ReviewVO">
		SELECT * FROM
		productReview
	</select>
	<update id="UPDATE_ANSWER_STATUS"> 
		UPDATE inquiry
		SET status = 'SUCCESS'
		WHERE uid = #{inqr_uid};
	 </update>

	<!-- 관리자 리뷰 -->
	<insert id="ADD_OR_UPDATE_ANSWER">
		INSERT INTO inquiryAnswer (inqr_uid, title, content, mem_id, reg_date)
		VALUES (#{inqr_uid}, #{title}, #{content}, #{mem_id}, #{reg_date})
		ON DUPLICATE KEY UPDATE title = VALUES(title), content = VALUES(content), reg_date = VALUES(reg_date)
	</insert>
	<!--  관리자 공지 -->
	<select id="SELECT_NOTICE_LIST_ALL" resultType="notice">
		SELECT * FROM notice
	</select>
	<insert id="INSERT_NOTICE_ADMIN">
		INSERT INTO notice
		(title, content, reg_date, priority, type, writer, view_cnt, main_image)
		VALUES(#{title}, #{content}, #{reg_date}, #{priority}, #{type}, '관리자', 0, #{main_image})
	</insert>
	<update id="UPDATE_NOTICE_ADMIN">
		UPDATE notice
		SET title=#{title}, content=#{content}, reg_date=#{reg_date}, 
		priority=#{priority}, type=#{type}, main_image=#{main_image}
		WHERE uid=#{uid}
	</update>
	<!-- 관리자 FAQ -->
	<select id="SELECT_FAQ_DETAIL_ADMIN" resultType="faq">
		SELECT * FROM faq WHERE uid =#{uid};
	</select>
	

	<!-- REVIEW -->
	<!-- 리뷰 전체 목록 조회 -->
	<select id="SELECT_REVIEW_LIST" resultType="review">
		select uid, mem_id, prod_code, title, content, score, reg_date,
			substring(image1, instr(image1, '_') + 1) as image1,
			substring(image2, instr(image2, '_') + 1) as image2,
			substring(image3, instr(image3, '_') + 1) as image3,
			substring(image4, instr(image4, '_') + 1) as image4
		from productReview
		where prod_code LIKE CONCAT(#{uid}, ':%');
	</select>

	<!-- 특정 회원이 작성한 리뷰 조회 -->
	<select id="SELECT_BY_USER_ID" parameterType="String"
		resultType="com.kgitbank.slimbear.dto.ReviewDTO">
		SELECT *
		FROM productReview
		WHERE mem_id = #{userID}
	</select>

	<!-- 특정 prodUid에 대한 리뷰 조회 -->
	<select id="SELECT_BY_PRODCODE" resultType="review">
		SELECT * FROM productReview
		WHERE prod_code LIKE CONCAT(#{uid}, ':%')
	</select>

	<!-- 리뷰 최신 순 조회 -->
	<select id="SELECT_REVIEW_RECENT" resultType="review">
		SELECT * FROM productReview ORDER BY reg_date DESC
	</select>
	<insert id="INSERT_REVIEW">
		INSERT INTO productReview
		(mem_id, prod_code, title, content, score, reg_date, image1, image2, image3, image4)
		VALUES(#{mem_id}, #{prod_code}, #{title}, #{content}, #{score},
		#{reg_date}, #{image1}, #{image2}, #{image3}, #{image4})
	</insert>
	<!-- 데이터 삽입 -->
<!-- 	<insert id="INSERT_REVIEW">
		INSERT INTO productReview
		(mem_id, prod_code, title, content, score, reg_date)
		VALUES(#{mem_id}, #{prod_code}, #{title}, #{content}, #{score}, #{reg_date})
	</insert> -->

	<!-- 리뷰 업데이트 -->
	<update id="UPDATE_REVIEW">
		UPDATE productReview
		SET title=#{title}, content=#{content}, score=#{score}
		WHERE uid=#{uid}
	</update>

	<!-- 리뷰 삭제 -->
	<delete id="DELETE_REVIEW">
		DELETE FROM productReview WHERE uid=#{uid}
	</delete>





	<!-- REVIEWCOMMENT -->
	<!-- 리뷰 전체 목록 조회 -->
	<select id="SELECT_REVIEWCOMENT_LIST" resultType="review">
		SELECT * FROM reviewComent
	</select>

	<!-- 데이터 삽입 -->
	<insert id="INSERT_REVIEWCOMENT">
		INSERT INTO reviewComent
		(review_id, title, content, mem_id)
		VALUES(#{review_id}, #{title}, #{content}, #{mem_id})
	</insert>

	<!-- 리뷰 업데이트 -->
	<update id="UPDATE_REVIEWCOMENT">
		UPDATE reviewComent
		SET title=#{title}, content=#{content}, score=#{score}
		WHERE uid=#{uid}
	</update>

	<!-- 리뷰 삭제 -->
	<delete id="DELETE_REVIEWCOMENT">
		DELETE FROM productReview WHERE uid=#{uid}
	</delete>






	<!-- INQUIRY -->
	<!-- 상품문의 목록 조회 -->
	<select id="SELECT_INQUIRY_LIST" resultType="inquiry">
		SELECT
		uid,
		CONCAT(SUBSTRING(writer_id, 1, 2), REPEAT('*', LENGTH(writer_id) - 2)) AS writer_id,
		title,
		content,
		reg_date,
		status,
		type,
		prod_uid AS priority,
		secure
		FROM
		inquiry
		WHERE
		type = #{type}
		AND prod_uid IS NULL
		ORDER BY reg_date DESC
		LIMIT #{pageSize} OFFSET #{offset};
	</select>

	<select id="SELECT_INQUIRY_LIST_ALL" resultType="inquiry">
		SELECT
		uid,
		writer_id,
		title,
		content,
		reg_date,
		status,
		type,
		prod_uid AS priority,
		secure
		FROM
		inquiry
	</select>

	<select id="SELECT_CNT_INQUIRY_LIST" resultType="int">
		SELECT COUNT(*)
		FROM inquiry WHERE type=#{type} AND prod_uid IS NULL;
	</select>

	<select id="SELECT_INQUIRY_UID_BY_PRODUID" resultType="int">
		SELECT uid FROM inquiry WHERE prod_uid = #{prod_uid}
	</select>

	<!-- 문의게시글 답변게시글 -->
	<select id="SELECT_INQUIRY_ANSWERS" resultType="InquiryAnswer">
		SELECT
		uid,
		inqr_uid,
		title,
		content,
		mem_id,
		reg_date
		FROM
		inquiryAnswer
		WHERE
		inqr_uid = #{inqr_uid}
	</select>


	<!-- 회원 문의 게시글 조회 -->
	<select id="SELECT_INQUIRY_USER" resultType="inquiry">
		SELECT * FROM inquiry WHERE writer_id=#{writer_id}
	</select>


	<!-- 문의게시글 조회 -->
	<select id="SELECT_INQUIRY_DETAIL" resultType="inquiry">
    SELECT
        uid,
        writer_id,
        title,
        content,
        reg_date,
        status,
        type,
        prod_uid,
        secure,
		SUBSTRING(attach_image1, INSTR(attach_image1, '_') + 1) AS attach_image1,
		SUBSTRING(attach_image2, INSTR(attach_image2, '_') + 1) AS attach_image2,
		SUBSTRING(attach_image3, INSTR(attach_image3, '_') + 1) AS attach_image3,
		SUBSTRING(attach_image4, INSTR(attach_image4, '_') + 1) AS attach_image4
    FROM
        inquiry
    WHERE
        uid = #{uid};
</select>

	<!-- 특정 prod_uid 상품문의 조회 -->
	<select id="SELECT_INQUIRY_PRODUID" resultType="inquiry">
		SELECT * FROM inquiry WHERE prod_uid=#{prod_uid}
	</select>
	<select id="SELECT_INQUIRYUID" resultType="long"
		parameterType="inquiry">
		SELECT uid FROM inquiry WHERE prod_code = #{prod_code}
	</select>
	<!-- 상품문의 데이터 삽입 -->
	<insert id="INSERT_INQUIRY">
		<!-- id 대신 name 가져오기 -->
		INSERT INTO inquiry
		(writer_id, title, content, reg_date, status, type, prod_uid, secure, attach_image1, attach_image2, attach_image3, attach_image4)
		VALUES(
		<!-- COALESCE((SELECT name FROM member WHERE id = #{writer_id}), 'DefaultName'), -->
		#{writer_id},
		#{title},
		#{content},
		#{reg_date},
		COALESCE(#{status}, 'WAIT'),
		#{type},
		#{prod_uid},
		#{secure},
	    #{attach_image1},
	    #{attach_image2},
	    #{attach_image3},
	    #{attach_image4} 
		)
	</insert>

	<!-- 상품문의 업데이트 -->
	<update id="UPDATE_INQUIRY">
		UPDATE inquiry
		SET content=#{content}, status=#{status}
		WHERE uid=#{uid}
	</update>

	<!-- 상품문의 목록 삭제 -->
	<delete id="DELETE_INQUIRY">
		DELETE FROM inquiry WHERE uid = #{uid}
	</delete>

	<!-- 게시글 검색 -->
	<select id="SELECT_INQUIRY_LIST_BY_SEARCH"
		parameterType="java.util.Map" resultType="inquiry">
		SELECT * FROM inquiry WHERE
		<if test="searchKey eq 'title'">
			title LIKE CONCAT('%',#{searchs} , '%')
		</if>
		<if test="searchKey == 'content'">
			content LIKE CONCAT('%',#{searchs} , '%')
		</if>
		<if test="searchKey == 'writer_id'">
			writer_id LIKE CONCAT('%',#{searchs} , '%')
		</if>
		<if test="searchKey == 'prod_uid'">
			prod_uid = #{searchs}
		</if>
		ORDER BY reg_date DESC
	</select>

	<!-- inquiryAnswer -->
	<!-- 질문답변 조회 -->
	<select id="SELECT_INQUIRYANSWER_LIST"
		resultType="inquiryAnswer" parameterType="inquiry">
		SELECT * FROM inquiryAnswer WHERE inqr_uid=#{inqr_uid}
	</select>

	<select id="SELECT_ANSWER_BY_INQRUID" resultType="inquiryAnswer">
		SELECT * FROM
		inquiryAnswer WHERE inqr_uid = #{inqr_uid}
	</select>
	<!-- 질문답변 데이터 삽입 -->
	<insert id="INSERT_INQUIRYANSWER">
		INSERT INTO inquiry
		(inqr_uid, title, content, mem_id)
		VALUES(#{inqr_uid}, #{title}, #{content}, #{mem_id})
	</insert>

	<!-- 질문답변 업데이트 -->
	<update id="UPDATE_INQUIRYANSWER">
		UPDATE
		SET title=#{title}, content=#{content}
		WHERE uid=#{uid}
	</update>

	<!-- 질문답변 삭제 -->
	<delete id="DELETE_INQUIRYANSWER">
		DELETE FROM inquiryAnswer WHERE inqr_uid = #{uid}
	</delete>





	<!-- faq -->
	<!-- faq 목록 조회 -->
	<select id="SELECT_FAQ_LIST" resultType="faq">
		SELECT * FROM faq
	</select>

	<!-- 특정 type으로 필터링된 상품문의 목록 조회 -->
	<select id="SELECT_FAQ_LIST_BY_TYPE" resultType="faq"
		parameterType="java.lang.String">
		SELECT * FROM faq WHERE type = #{type};
	</select>

	<!-- faq 데이터 삽입 -->
	<insert id="INSERT_FAQ">
		INSERT INTO faq
		(question, answer, type)
		VALUES(#{question}, #{answer}, #{type})
	</insert>

	<!-- faq 업데이트 -->
	<update id="UPDATE_FAQ">
		UPDATE faq
		SET question=#{question}, answer=#{answer},
		type=#{type}
		WHERE uid=#{uid}
	</update>

	<!-- faq 삭제 -->
	<delete id="DELETE_FAQ">
		DELETE FROM faq WHERE uid=#{uid}
	</delete>





	<!-- notice -->
	<!-- notice 조회 -->
	<select id="SELECT_NOTICE_LIST" resultType="notice">
		<!-- SELECT * FROM notice -->
		SELECT * FROM notice WHERE priority != 0 ORDER BY FIELD(priority, 1,
		2) ASC, CASE WHEN priority = 2 THEN reg_date END DESC
		LIMIT #{pageSize} OFFSET #{offset};
	</select>
	
	<select id="SELECT_CNT_NOTICE_LIST" resultType="int">
		SELECT COUNT(*)
		FROM notice;
	</select>
	
	<!-- notice 상세페이지 조회 -->
	<select id="SELECT_NOTICE_DETAIL" resultType="notice">
		SELECT * FROM notice WHERE uid=#{uid}
	</select>

	<!-- notice 게시글 조회수 증가 -->
	<update id="INCREASE_NOTICE_VIEW_COUNT">
		UPDATE notice
		SET view_cnt = view_cnt + 1
		WHERE uid=#{uid}
	</update>

	<!-- notice 데이터 삽입 -->
	<insert id="INSERT_NOTICE">
		INSERT INTO notice
		(title, content, reg_date, priority, type, writer)
		VALUES(#{title}, #{content}, #{reg_date}, #{priority}, #{type}, #{writer}, 0, #{main_image})
		WHERE uid=#{uid}
	</insert>

	<!-- notice 업데이트 -->
	<update id="UPDATE_NOTICE">
		UPDATE notice
		SET title=#{title},
		priority=#{priority}, type=#{type}, writer=#{writer}
		WHERE uid=#{uid}
	</update>

	<!-- notice 삭제 -->
	<delete id="DELETE_NOTICE">
		DELETE FROM notice WHERE uid=#{uid}
	</delete>
	
	<!-- 특정 사용자가 작성한 리뷰를 페이징하여 가져오는 쿼리 -->
	<select id="SELECT_BY_USER_ID_PAGING" parameterType="map" resultType="com.kgitbank.slimbear.dto.ReviewDTO">
	    SELECT *
	    FROM productReview
	    WHERE mem_id = #{userID}
	    LIMIT #{start}, #{end}
	</select>
	
	<!-- 특정 사용자가 작성한 총 리뷰 수를 가져오는 쿼리 -->
	<select id="COUNT_TOTAL_REVIEWS" parameterType="String" resultType="int">
	    SELECT COUNT(*)
	    FROM productReview
	    WHERE mem_id = #{userID}
	</select>

</mapper>